<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Flappy Bird</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background: linear-gradient(to bottom, #87CEEB, #E0F7FA);
      font-family: 'Arial Rounded MT Bold', 'Arial', sans-serif;
    }
    
    #game-container {
      position: relative;
      width: 400px;
      height: 600px;
      background: linear-gradient(to bottom, #64B5F6, #81D4FA);
      overflow: hidden;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      border: 4px solid #333;
    }
    
    #bird {
      position: absolute;
      width: 50px;
      height: 35px;
      background: linear-gradient(to bottom, #FFD54F, #FFCA28);
      border-radius: 50% 60% 40% 50%;
      left: 80px;
      top: 250px;
      transition: transform 0.1s;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
      z-index: 5;
    }
    
    #bird::before {
      content: "";
      position: absolute;
      width: 18px;
      height: 12px;
      background: linear-gradient(to bottom, #FF7043, #FF5722);
      border-radius: 50%;
      right: -5px;
      top: 12px;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }
    
    #bird::after {
      content: "";
      position: absolute;
      width: 12px;
      height: 12px;
      background-color: #333;
      border-radius: 50%;
      left: 10px;
      top: 8px;
      box-shadow: 0 0 2px 1px rgba(255, 255, 255, 0.7) inset;
    }
    
    #bird-wing {
      position: absolute;
      width: 20px;
      height: 15px;
      background-color: #FFB300;
      border-radius: 50%;
      top: 20px;
      left: 15px;
      transform-origin: top center;
      animation: flapWing 0.4s infinite alternate;
    }
    
    @keyframes flapWing {
      0% { transform: rotate(-10deg); }
      100% { transform: rotate(30deg); }
    }
    
    .pipe {
      position: absolute;
      width: 80px;
      background: linear-gradient(to right, #2E7D32, #4CAF50, #2E7D32);
      border: 4px solid #333;
      border-radius: 5px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
      z-index: 3;
    }
    
    .pipe-top {
      border-bottom: none;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
    
    .pipe-top::after {
      content: "";
      position: absolute;
      width: 100px;
      height: 30px;
      background: linear-gradient(to right, #1B5E20, #388E3C, #1B5E20);
      bottom: -15px;
      left: -10px;
      border: 4px solid #333;
      border-radius: 5px;
      z-index: 4;
    }
    
    .pipe-bottom {
      border-top: none;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
    
    .pipe-bottom::before {
      content: "";
      position: absolute;
      width: 100px;
      height: 30px;
      background: linear-gradient(to right, #1B5E20, #388E3C, #1B5E20);
      top: -15px;
      left: -10px;
      border: 4px solid #333;
      border-radius: 5px;
      z-index: 4;
    }
    
    #clouds {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
    }
    
    .cloud {
      position: absolute;
      background-color: rgba(255, 255, 255, 0.8);
      border-radius: 50%;
      z-index: 1;
    }
    
    #ground {
      position: absolute;
      bottom: 0;
      width: 100%;
      height: 80px;
      background: linear-gradient(to bottom, #8D6E63, #795548);
      z-index: 2;
    }
    
    #grass {
      position: absolute;
      bottom: 80px;
      width: 100%;
      height: 20px;
      background: linear-gradient(to bottom, #66BB6A, #43A047);
      z-index: 2;
    }
    
    #score-container {
      position: absolute;
      top: 20px;
      right: 20px;
      background-color: rgba(0, 0, 0, 0.7);
      padding: 10px 20px;
      border-radius: 20px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      z-index: 10;
    }
    
    #score {
      font-size: 30px;
      font-weight: bold;
      color: white;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }
    
    #game-over {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 40px;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
      display: none;
      z-index: 20;
    }
    
    #restart-btn {
      margin-top: 20px;
      padding: 12px 30px;
      background: linear-gradient(to bottom, #4CAF50, #388E3C);
      border: none;
      border-radius: 30px;
      color: white;
      font-size: 20px;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      transition: all 0.2s ease;
    }
    
    #restart-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }
    
    #start-screen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 40px;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
      z-index: 20;
    }
    
    #game-title {
      font-size: 50px;
      font-weight: bold;
      color: #FFEB3B;
      text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.8);
      margin-bottom: 20px;
    }
    
    #start-btn {
      margin-top: 20px;
      padding: 12px 30px;
      background: linear-gradient(to bottom, #4CAF50, #388E3C);
      border: none;
      border-radius: 30px;
      color: white;
      font-size: 20px;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      transition: all 0.2s ease;
    }
    
    #start-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }
    
    #high-score {
      margin-top: 10px;
      font-size: 20px;
      color: #FFEB3B;
    }
  </style>
</head>
<body>
  <div id="game-container">
    <div id="clouds"></div>
    <div id="bird">
      <div id="bird-wing"></div>
    </div>
    <div id="grass"></div>
    <div id="ground"></div>
    <div id="score-container">
      Score: <span id="score">0</span>
    </div>
    <div id="game-over">
      Game Over
      <div id="final-score">Score: 0</div>
      <button id="restart-btn">Restart</button>
    </div>
    <div id="start-screen">
      <div id="game-title">Flappy Bird</div>
      <p style="font-size: 16px;">Click or press spacebar to flap</p>
      <div id="high-score">High Score: 0</div>
      <button id="start-btn">Start Game</button>
    </div>
  </div>

  <script>
    // Game elements
    const bird = document.getElementById('bird');
    const gameContainer = document.getElementById('game-container');
    const scoreDisplay = document.getElementById('score');
    const gameOverScreen = document.getElementById('game-over');
    const finalScoreDisplay = document.getElementById('final-score');
    const restartBtn = document.getElementById('restart-btn');
    const startScreen = document.getElementById('start-screen');
    const startBtn = document.getElementById('start-btn');
    const highScoreDisplay = document.getElementById('high-score');
    const cloudsContainer = document.getElementById('clouds');
    
    // Game variables
    let birdY = 250;
    let birdVelocity = 0;
    let birdGravity = 0.5;
    let pipes = [];
    let clouds = [];
    let gameRunning = false;
    let score = 0;
    let highScore = 0; // No localStorage, just use in-memory storage
    let pipeGap = 180;
    let lastPipeTime = 0;
    let pipeInterval = 1800; // ms
    let animationId;
    
    // Update high score display
    highScoreDisplay.textContent = `High Score: ${highScore}`;
    
    // Create clouds
    function createClouds() {
      for (let i = 0; i < 6; i++) {
        const cloud = document.createElement('div');
        cloud.className = 'cloud';
        const size = Math.random() * 60 + 40;
        cloud.style.width = size + 'px';
        cloud.style.height = size / 2 + 'px';
        cloud.style.left = Math.random() * gameContainer.clientWidth + 'px';
        cloud.style.top = Math.random() * (gameContainer.clientHeight / 2) + 'px';
        cloud.style.opacity = Math.random() * 0.4 + 0.6;
        cloud.speed = Math.random() * 0.5 + 0.2;
        
        // Create cloud shape
        for (let j = 0; j < 3; j++) {
          const cloudPuff = document.createElement('div');
          cloudPuff.style.position = 'absolute';
          cloudPuff.style.backgroundColor = 'white';
          cloudPuff.style.borderRadius = '50%';
          cloudPuff.style.width = size * (0.6 + j * 0.2) + 'px';
          cloudPuff.style.height = size * (0.6 + j * 0.2) + 'px';
          cloudPuff.style.top = j * 5 + 'px';
          cloudPuff.style.left = j * 10 + 'px';
          cloud.appendChild(cloudPuff);
        }
        
        cloudsContainer.appendChild(cloud);
        clouds.push(cloud);
      }
    }
    
    // Move clouds
    function moveClouds() {
      for (const cloud of clouds) {
        let x = parseFloat(cloud.style.left);
        x -= cloud.speed;
        
        if (x < -100) {
          x = gameContainer.clientWidth + 50;
          cloud.style.top = Math.random() * (gameContainer.clientHeight / 2) + 'px';
        }
        
        cloud.style.left = x + 'px';
      }
    }
    
    // Start game
    function startGame() {
      startScreen.style.display = 'none';
      gameRunning = true;
      birdY = 250;
      birdVelocity = 0;
      score = 0;
      scoreDisplay.textContent = score;
      
      // Clear all pipes
      for (const pipe of pipes) {
        gameContainer.removeChild(pipe.top);
        gameContainer.removeChild(pipe.bottom);
      }
      pipes = [];
      
      lastPipeTime = Date.now();
      
      if (clouds.length === 0) {
        createClouds();
      }
      
      cancelAnimationFrame(animationId);
      gameLoop();
    }
    
    // Game loop
    function gameLoop() {
      if (!gameRunning) return;
      
      // Bird movement
      birdVelocity += birdGravity;
      birdY += birdVelocity;
      
      if (birdY < 0) {
        birdY = 0;
        birdVelocity = 0;
      }
      
      if (birdY > gameContainer.clientHeight - 120) { // Account for ground height
        gameOver();
        return;
      }
      
      bird.style.top = birdY + 'px';
      bird.style.transform = `rotate(${Math.min(Math.max(birdVelocity * 3, -30), 90)}deg)`;
      
      // Create pipes
      const currentTime = Date.now();
      if (currentTime - lastPipeTime > pipeInterval) {
        createPipe();
        lastPipeTime = currentTime;
      }
      
      // Move pipes
      movePipes();
      
      // Move clouds
      moveClouds();
      
      // Check collisions
      if (checkCollisions()) {
        gameOver();
        return;
      }
      
      animationId = requestAnimationFrame(gameLoop);
    }
    
    // Create a new pipe
    function createPipe() {
      const pipeHeight = Math.floor(Math.random() * 220) + 100;
      const pipeTop = document.createElement('div');
      pipeTop.className = 'pipe pipe-top';
      pipeTop.style.height = pipeHeight + 'px';
      pipeTop.style.left = gameContainer.clientWidth + 'px';
      pipeTop.style.top = '0';
      
      const pipeBottom = document.createElement('div');
      pipeBottom.className = 'pipe pipe-bottom';
      pipeBottom.style.height = (gameContainer.clientHeight - pipeHeight - pipeGap - 100) + 'px'; // Account for ground
      pipeBottom.style.left = gameContainer.clientWidth + 'px';
      pipeBottom.style.bottom = '100px'; // Account for ground
      
      gameContainer.appendChild(pipeTop);
      gameContainer.appendChild(pipeBottom);
      
      pipes.push({
        top: pipeTop,
        bottom: pipeBottom,
        x: gameContainer.clientWidth,
        passed: false
      });
    }
    
    // Move pipes
    function movePipes() {
      for (let i = pipes.length - 1; i >= 0; i--) {
        const pipe = pipes[i];
        pipe.x -= 3; // Increased speed
        
        pipe.top.style.left = pipe.x + 'px';
        pipe.bottom.style.left = pipe.x + 'px';
        
        // Check if bird passed the pipe
        if (!pipe.passed && pipe.x < 60) {
          pipe.passed = true;
          score++;
          scoreDisplay.textContent = score;
          
          // We're not using real audio objects since they might not work in all environments
          // Just simulate the score sound effect
          try {
            const scoreSound = new Audio();
            scoreSound.volume = 0.2;
          } catch (e) {
            // Ignore audio errors
          }
        }
        
        // Remove pipes that are out of screen
        if (pipe.x < -100) {
          gameContainer.removeChild(pipe.top);
          gameContainer.removeChild(pipe.bottom);
          pipes.splice(i, 1);
        }
      }
    }
    
    // Check collisions
    function checkCollisions() {
      const birdRect = bird.getBoundingClientRect();
      const containerRect = gameContainer.getBoundingClientRect();
      
      // Convert to relative coordinates
      const birdLeft = birdRect.left - containerRect.left + 10; // Smaller hitbox
      const birdRight = birdRect.right - containerRect.left - 10; // Smaller hitbox
      const birdTop = birdRect.top - containerRect.top + 5; // Smaller hitbox
      const birdBottom = birdRect.bottom - containerRect.top - 5; // Smaller hitbox
      
      // Check ground collision
      if (birdBottom > containerRect.height - 100) { // Ground height
        return true;
      }
      
      for (const pipe of pipes) {
        const pipeTopRect = pipe.top.getBoundingClientRect();
        const pipeBottomRect = pipe.bottom.getBoundingClientRect();
        
        // Convert to relative coordinates
        const pipeLeft = pipeTopRect.left - containerRect.left + 5; // Smaller hitbox
        const pipeRight = pipeTopRect.right - containerRect.left - 5; // Smaller hitbox
        const pipeTopBottom = pipeTopRect.bottom - containerRect.top - 10; // Account for pipe cap
        const pipeBottomTop = pipeBottomRect.top - containerRect.top + 10; // Account for pipe cap
        
        // Check horizontal collision
        if (birdRight > pipeLeft && birdLeft < pipeRight) {
          // Check vertical collision with top pipe
          if (birdTop < pipeTopBottom) {
            return true;
          }
          
          // Check vertical collision with bottom pipe
          if (birdBottom > pipeBottomTop) {
            return true;
          }
        }
      }
      
      return false;
    }
    
    // Bird flap
    function flap() {
      if (!gameRunning) return;
      birdVelocity = -8.5;
      
      // Simulate flap sound
      try {
        const flapSound = new Audio();
        flapSound.volume = 0.2;
      } catch (e) {
        // Ignore audio errors
      }
    }
    
    // Game over
    function gameOver() {
      gameRunning = false;
      gameOverScreen.style.display = 'flex';
      finalScoreDisplay.textContent = `Score: ${score}`;
      
      // Simulate game over sound
      try {
        const gameOverSound = new Audio();
      } catch (e) {
        // Ignore audio errors
      }
      
      // Update high score (in memory only)
      if (score > highScore) {
        highScore = score;
        highScoreDisplay.textContent = `High Score: ${highScore}`;
      }
    }
    
    // Event listeners
    window.addEventListener('keydown', (e) => {
      if (e.code === 'Space') {
        if (gameRunning) {
          flap();
        }
      }
    });
    
    gameContainer.addEventListener('click', () => {
      if (gameRunning) {
        flap();
      }
    });
    
    startBtn.addEventListener('click', startGame);
    restartBtn.addEventListener('click', () => {
      gameOverScreen.style.display = 'none';
      startGame();
    });
  </script>
</body>
</html>
